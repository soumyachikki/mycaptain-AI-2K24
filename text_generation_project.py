# -*- coding: utf-8 -*-
"""Text_generation_project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UIk74SdSy6Xy8BMSfhrQi9CW5iYh8MHV
"""

#Import Dependencies
import numpy
import sys
import nltk
nltk.download('stopwords')
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint
import warnings
warnings.filterwarnings('ignore')

# load data
# loading data and opening our input data in the form of a txt file
# Project Gutenburg/berg is where the data can be found
file=open("frankenstein.txt").read()

# tokenization
# standardization
#what is tokenization? Tokenization is the process of breaking a stream of text up into words phrases symbols or some meaningful elements
def tokenize_words(input):
  #lowercase everything to standarize it
    input=input.lower()
    #instantiating the tokenizer
    tokenizer=RegexpTokenizer(r'\w+')
    #tokenizing the text into tokens
    tokens=tokenizer.tokenize(input)
    #filtering the stopwords using lamda
    filtered=filter(lambda token: token not in stopwords.words('english'), tokens)
    return " ".join(filtered)
  #preprocess the input data,make tokens
processed_inputs=tokenize_words(file)

#chars to numbers
#convert characters in our input to numbers
#we'll sort the list of the set of all characters that appear in out i/p text and then use the enumerate fn
#to get numbers that represent the characters
#we'll then create a dictionary that stores the keys and values,or the characters and the numbers that represent them
chars=sorted(list(set(processed_inputs)))
char_to_num=dict((c,i) for i,c in enumerate(chars))

#check if the words to chars or chars to num (?!) has worked?
#just so we get an idea of whether our process of converting words to characters has worked,
#we print the length of our variables
input_len=len(processed_inputs)
vocab_len=len(chars)
print("Total number of characters:", input_len)
print("Total vocab:",vocab_len)

#seq length
#we're defining how long we want an individual sequence here
#an individual sequence is a complete mapping of input characters as integers
seq_length=100
x_data=[]
y_data=[]

#loop through the sequence
#here we are going through the entire list of i/ps and converting the chars to numberswith a for loop
#this will create a bunch of sequences where each sequence starts with the next character in the i/p data
#beginning with the first character
for i in range(0,input_len-seq_length,1):
  #define i/p and o/p sequences
  #i/p is the current character plus the desired sequence length
    in_seq=processed_inputs[i:i+seq_length]
    #out sequence is the initial character plus total sequence length
    out_seq=processed_inputs[i+seq_length]
    # converting the list of characters to integers based on previous values and appending the values to our lists
    x_data.append([char_to_num[char] for char in in_seq])
    y_data.append(char_to_num[out_seq])
#check to see how many total input sequences we have
n_patterns=len(x_data)
print("Total Patterns:", n_patterns)

# convert input sequence to np array that our network can use
X=numpy.reshape(x_data,(n_patterns, seq_length,1))
X=X/float(vocab_len)

# One-hot encode our label data
y=np_utils.to_categorical(y_data)

#Creating the model
#creating a sequential model
#dropout is used to prevent overfitting
model=Sequential()
model.add(LSTM(256, input_shape=(X.shape[1],X.shape[2]), return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(256, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(256))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1],activation='softmax'))

#Compile the model
model.compile(loss='categorical_crossentropy',optimizer='adam')

#saving the weights
filepath='model_weights_saved.hdf5'
checkpoint=ModelCheckpoint(filepath, monitor='loss',verbose=1,save_best_only=True,mode='min')
desired_callbacks=[checkpoint]

#fit the model and let it train
model.fit(X,y,epochs=4,batch_size=256,callbacks=desired_callbacks)

#recompile model with saved weights
filename='model_weights_saved.hdf5'
model.load_weights(filename)
model.compile(loss='categorical_crossentropy',optimizer='adam')

# output of the models back into characters
num_to_char=dict((i,c) for i,c in enumerate(chars))

#random seed to help generate
start=numpy.random.randint(0,len(x_data)-1)
pattern=x_data[start]
print("Random Seed :")
print("\"",''.join([num_to_char[value] for value in pattern]),"\"")

# generate the text
for i in range(1000):
    x=numpy.reshape(pattern,(1,len(pattern),1))
    x=x/float(vocab_len)
    prediction=model.predict(x, verbose=0)
    index=numpy.argmax(prediction)
    result=num_to_char[index]
    seg_in=[num_to_char[value] for value in pattern]
    sys.stdout.write(result)
    pattern.append(index)
    pattern=pattern[1:len(pattern)]